<launch>
    <!-- Static transforms -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.007 0 0.14 0 0 0 base_link linklidar 30" />
    <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0 0 0 0 world base_link 30" />


    <!-- BEGIN: Wheel Odometry Publisher -->
    <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
    <!-- Publish: /odom_data_euler, /odom_data_quat -->
    <node name="ekf_odom_pub_for_mapping" pkg="localization_data_pub" type="ekf_odom_pub_for_mapping" output="screen"/>
    <!-- END: Wheel Odometry Publisher -->

    <!-- Lidar data publisher using RPLIDAR -->
    <!--  <include file="$(find robot_mapping)/launch/rplidar_a1.launch"/> -->

    <!-- Map to odom will be provided by the gmapping node -->
    <!-- Gmapping for SLAM -->
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
        <param name="base_frame" value="base_link"/>
        <param name="odom_frame" value="odom"/>
        <param name="map_frame" value="map"/>
        <param name="scan_topic" value="/scan"/>
        <param name="use_tf_scan_transforms" value="true"/>
    </node>
    <!-- <include file="$(find robot_mapping)/launch/mapping.launch"/> -->

    <!-- AMCL for Localization -->
    <!-- include file="$(find robot_amcl)/launch/amcl.launch"/> -->

    <!-- Extended Kalman Filter from robot_pose_ekf Node -->
    <remap from="odom" to="odom_data_quat" />
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="base_footprint_frame" value="world"/>
        <param name="freq" value="30.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="false"/>
        <param name="vo_used" value="false"/>
        <param name="gps_used" value="false"/>
        <param name="debug" value="false"/>
        <param name="self_diagnose" value="false"/>
    </node>

    <!-- Initial pose setting -->
    <arg name="x" default="0.0"/>   <!-- Modify this for x coordinate -->
    <arg name="y" default="0.0"/>   <!-- Modify this for y coordinate -->
    <arg name="yaw" default="0.0"/> <!-- Modify this for rotation around z -->

    <node name="pub_initpose_node" pkg="navstack_pub" type="setInitialPose.py" output="screen">
        <param name="x" value="$(arg x)"/>
        <param name="y" value="$(arg y)"/>
        <param name="yaw" value="$(arg yaw)"/>
    </node>

    <!-- ROBOT Model -->
    <include file="$(find roboter)/launch/display.launch"/>

    <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d"/>

    <!-- Control robot using key board -->
    <!-- <node name="manualcontrol_pub_node" pkg="navstack_pub" type="pub_control.py" output="screen"/> --> 
    
    <!-- Control robot manual using Robot Steering pakage -->
    <!-- <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering"> 
    </node> -->

    <!-- Move Base Launch -->
    <!-- <include file="$(find navstack_pub)/launch/move_base_turtlebot3.launch"/> -->

</launch>
